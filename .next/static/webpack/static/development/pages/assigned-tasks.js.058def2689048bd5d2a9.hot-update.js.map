{"version":3,"file":"static/webpack/static\\development\\pages\\assigned-tasks.js.058def2689048bd5d2a9.hot-update.js","sources":["webpack:///./components/Entry.js"],"sourcesContent":["import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport {Card, Button, ButtonToolbar, Tooltip, OverlayTrigger, Dropdown, Form, ButtonGroup} from 'react-bootstrap'\r\nimport fire from '../config/firebaseConfig'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport Link from 'next/link'\r\n\r\nclass Entry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditable: false\r\n        }\r\n        this.toggleSelection = this.toggleSelection.bind(this);\r\n        this.toggleEditable = this.toggleEditable.bind(this);\r\n        this.copyToClipboard = this.copyToClipboard.bind(this);\r\n    };\r\n    \r\n    copyToClipboard(values) {\r\n        let fullAddress = values.street + ', ' + values.city;\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    getDataValues(entry) {\r\n        switch (this.props.type) {\r\n            case 'tasks':\r\n                let options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric' };\r\n                let date = entry.timestamp.toDate();\r\n                let statusIcon;\r\n                let statusMessage;\r\n                let fullAddressWithButtons = (\r\n                    <span>{entry.address +', '+ entry.city}<br/><OverlayTrigger\r\n                        placement='top'\r\n                        overlay={\r\n                            <Tooltip>\r\n                            העתקה\r\n                            </Tooltip>\r\n                        }>\r\n                            <CopyToClipboard text={entry.address +', '+ entry.city}><i style={{cursor: 'pointer'}} className=\"ml-2 far fa-clipboard nm\"></i>\r\n                            </CopyToClipboard>\r\n                        </OverlayTrigger>\r\n\r\n                        <OverlayTrigger\r\n                        placement='top'\r\n                        overlay={\r\n                            <Tooltip>\r\n                            חיפוש ב־Waze\r\n                            </Tooltip>\r\n                        }>\r\n                            <a target=\"_blank\" href={`https://waze.com/ul?q=` + entry.address +', '+ entry.city}><i style={{cursor: 'pointer'}} className=\"ml-2 fab fa-waze nm\"></i>\r\n                            </a>\r\n                        </OverlayTrigger></span>\r\n                )\r\n                if (entry.collected) {\r\n                    if (entry.reportFilled) {\r\n                        statusIcon = 'fas fa-calendar-check';\r\n                        statusMessage = 'בוצע ומושב';\r\n                    }\r\n                    else {\r\n                        statusIcon = 'far fa-calendar-check';\r\n                        statusMessage = 'בוצע ולא מושב';\r\n                    }\r\n                } else {\r\n                    if (entry.reportFilled) {\r\n                        statusIcon = 'fas fa-calendar-times';\r\n                        statusMessage = 'לא בוצע ומושב';\r\n                    } else {\r\n                        statusIcon = 'far fa-calendar-times';\r\n                        statusMessage = 'לא בוצע ולא מושב';\r\n                    }\r\n                }\r\n                return {\r\n                    date: date.toLocaleDateString('he-IL', options),\r\n                    time: date.getHours() + ':' + ('0'+date.getMinutes()).slice(-2),\r\n                    city: entry.city,\r\n                    name: entry.name,\r\n                    street: entry.address,\r\n                    fullAddress: entry.address + ', ' + entry.city,\r\n                    fullAddressWithButtons: fullAddressWithButtons,\r\n                    actions: 'ACTIONS',\r\n                    contactName: entry['contact name'],\r\n                    contactNumber: <a style={{whiteSpace: 'nowrap'}} href={'tel: '+ entry['contact number']}>{entry['contact number']}</a>,\r\n                    checkBox: this.props.isSelected ? <Form.Check custom checked label='' type='checkbox' /> : <Form.Check custom label='' type='checkbox' />,\r\n                    statusIcon: statusIcon,\r\n                    statusMessage: statusMessage\r\n                }\r\n            case 'users':\r\n                return {\r\n                    uid: entry.id,\r\n                    firstName: entry.firstName,\r\n                    lastName: entry.lastName,\r\n                    fullName: entry.firstName + '' + entry.lastName,\r\n                    region: entry.region,\r\n                    email: entry.email,\r\n                    phone: entry.phone,\r\n                    tz: entry.tz\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleSelection() {\r\n        if (this.props.isSelectable) {\r\n            this.props.selectCallback(this.props.entry, !this.props.isSelected);\r\n        }\r\n    }\r\n\r\n    toggleEditable() {\r\n        this.setState({isEditable: !this.state.isEditable});\r\n    }\r\n\r\n    render() {\r\n        let buttons = [];\r\n        let nm = this.props.tableTasksCardView ? 'nm' : '';\r\n        switch (this.props.page) { \r\n            case 'assignedTasks':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_NOTES', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className={\"far fa-sticky-note fa-fw \"+ nm}></i>{this.props.tableTasksCardView ? <br/> : ''}הערות</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_DONE', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className={\"far fa-calendar-check fa-fw \"+ nm}></i>{this.props.tableTasksCardView ? <br/> : ''}בוצע</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_CANCEL', entries: this.props.entry }),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className={\"far fa-calendar-times fa-fw \"+ nm}></i>{this.props.tableTasksCardView ? <br/> : ''}הסרה</span>\r\n                    },\r\n                ];\r\n                break;\r\n            case 'taskReports':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_FILL', entries: this.props.entry }),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className={\"far fa-calendar-check fa-fw \"+ nm}></i>{this.props.tableTasksCardView ? <br/> : ''}דיווח</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_UNDONE' }),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className={\"far fa-calendar-times fa-fw \"+ nm}></i>{this.props.tableTasksCardView ? <br/> : ''}לא בוצע</span>\r\n                    },\r\n                ];\r\n                break;\r\n            case 'adminUsers':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_USER', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'RESET_PASSWORD', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"fas fa-unlock-alt fa-fw\"></i>איפוס סיסמה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_USER', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-trash-alt fa-fw\"></i>סגירת חשבון</span>\r\n                    }\r\n                ];\r\n                break;\r\n            case 'adminTasks':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_TASK', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_STATUS', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"fas fa-question fa-fw\"></i>סטטוס</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_TASK', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-trash-alt fa-fw\"></i>מחיקה</span>\r\n                    }\r\n                ];\r\n                break;\r\n        }\r\n        if (this.props.tableTasksCardView) {\r\n            let values = this.getDataValues(this.props.entry);\r\n            let numButtons = 100/buttons.length;\r\n            let viewButtons = (\r\n                <ButtonGroup className=\"w-100 mt-4\">\r\n                    {buttons.map((button) => {\r\n                    return (\r\n                        <Button className={\"w-\"+numButtons} key={button.text} onClick={button.onClick} variant='outline-secondary'>{button.text}</Button>\r\n                        );\r\n                    })}\r\n                </ButtonGroup>\r\n            )\r\n            return (\r\n                <Card>\r\n                    <Card.Header>\r\n                    {values.date}, {values.time}\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                    <Card.Title>{values.name}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{values.fullAddressWithButtons}\r\n\r\n                        \r\n                    </Card.Subtitle>\r\n                    <Card.Text>\r\n                        <div className='mt-4'>{values.contactName}</div>\r\n                        <div>{values.contactNumber}</div>\r\n                        {viewButtons}\r\n                    </Card.Text>\r\n                    </Card.Body>\r\n                    \r\n                </Card>\r\n            );\r\n        } else {\r\n        return (\r\n            <tr className={(this.props.isSelected ? 'table-primary' : '') + (this.props.isSelectable ? ' entry-selectable' : '')}>\r\n                {this.props.tableColumns.map((column) => {\r\n                    switch (column) {\r\n                        case 'actions':\r\n                        {\r\n                            switch (this.props.page){\r\n                                case 'assignedTasks':\r\n                                        return (\r\n                                            <td className=\"align-middle\" key={column}>\r\n                                            <span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                    פעולות\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu>\r\n                                                {buttons.map((button) => {\r\n                                                        return (\r\n                                                            <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                            {button.text}\r\n                                                            </Dropdown.Item>\r\n                                                            );\r\n                                                        })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown></span>\r\n                                            </td>\r\n                                            );\r\n                                    \r\n                                case 'adminUsers':\r\n                                    return (\r\n                                    <td className=\"align-middle\" key={column}>\r\n                                    <span style={{whiteSpace: 'nowrap'}}>\r\n                                        <Dropdown width='200'>\r\n                                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                פעולות\r\n                                            </Dropdown.Toggle>\r\n                                            <Dropdown.Menu>\r\n                                            {buttons.map((button) => {\r\n                                            return (\r\n                                                <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                {button.text}\r\n                                                </Dropdown.Item>\r\n                                                );\r\n                                            })}\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </span>\r\n                                    </td>\r\n                                    );\r\n                                case 'adminTasks':\r\n                                        return <td className=\"align-middle\" key={column}>\r\n                                        <span style={{whiteSpace: 'nowrap'}}>\r\n                                            <Dropdown width='200'>\r\n                                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                    פעולות\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu>\r\n                                                {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                    {button.text}\r\n                                                    </Dropdown.Item>\r\n                                                    );\r\n                                                })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </span>\r\n                                    </td>;\r\n                                case 'taskReports':\r\n                                    return (\r\n                                    <td className=\"align-middle\" key={column}>\r\n                                        <span style={{whiteSpace: 'nowrap'}}>\r\n                                            <Dropdown width='200'>\r\n                                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                    פעולות\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu>\r\n                                                    {buttons.map((button) => {\r\n                                                    return (\r\n                                                        <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                        {button.text}\r\n                                                        </Dropdown.Item>\r\n                                                        );\r\n                                                    })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </span>\r\n                                    </td>\r\n                                    );\r\n                                default:\r\n                                    return (\r\n                                        <td className=\"align-middle\" key={column}>\r\n                                            <ButtonGroup>\r\n                                                {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Button key={button.text} onClick={button.onClick} variant={button.variant}>{button.text}</Button>\r\n                                                    );\r\n                                                })}\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                        );\r\n                            }\r\n                        }\r\n                        case 'status':\r\n                        {\r\n                        let values = this.getDataValues(this.props.entry);\r\n                        let message = values.statusMessage;\r\n                        let icon = values.statusIcon;\r\n                        return (\r\n                            <td className=\"align-middle\" key={column}>\r\n                                <ButtonToolbar>\r\n                                    <OverlayTrigger\r\n                                    placement='left'\r\n                                    overlay={\r\n                                        <Tooltip>\r\n                                        {message}\r\n                                        </Tooltip>\r\n                                    }>\r\n                                    <i className={icon}></i>\r\n                                    </OverlayTrigger>\r\n                                </ButtonToolbar>\r\n                            </td>\r\n                        );\r\n                        }\r\n                        default:\r\n                        {\r\n                        return (\r\n                            <td className=\"align-middle\" onClick={this.toggleSelection} key={column}>\r\n                                {this.getDataValues(this.props.entry)[column]}\r\n                            </td>\r\n                        );\r\n                        }\r\n                    }\r\n                })}\r\n            </tr>\r\n        );}\r\n    }\r\n}\r\nexport default connect(state => state)(Entry);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AA1EA;AA4EA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAvEA;AACA;AAwiIA;AAEA;AACA;;;;AA7VA;AACA;AA8VA;AAAA;AAAA;;;;A","sourceRoot":""}