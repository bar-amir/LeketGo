{"version":3,"file":"static/webpack/static\\development\\pages\\task-reports.js.0d8bbc3f84c26d99a79b.hot-update.js","sources":["webpack:///./components/Entry.js"],"sourcesContent":["import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport {Button, Dropdown, Form, ButtonGroup} from 'react-bootstrap'\r\nimport fire from '../config/firebaseConfig'\r\n\r\nclass Entry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditable: false\r\n        }\r\n        this.toggleSelection = this.toggleSelection.bind(this);\r\n        this.toggleEditable = this.toggleEditable.bind(this);\r\n    };\r\n\r\n    getDataValues(entry) {\r\n        switch (this.props.type) {\r\n            case 'tasks':\r\n                let options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric' };\r\n                let date = entry.timestamp.toDate();\r\n                return {\r\n                    date: date.toLocaleDateString('he-IL', options),\r\n                    time: date.getHours()+':'+('0'+date.getMinutes()).slice(-2),\r\n                    city: entry.city,\r\n                    name: entry.name,\r\n                    street: entry.address,\r\n                    fullAddress: entry.address + ', ' + entry.city,\r\n                    actions: 'ACTIONS',\r\n                    contactName: entry['contact name'],\r\n                    contactNumber: <a style={{whiteSpace: 'nowrap'}} href={'tel: '+ entry['contact number']}>{entry['contact number']}</a>,\r\n                    checkBox: this.props.isSelected ? <Form.Check custom checked label='' type='checkbox' /> : <Form.Check custom label='' type='checkbox' />\r\n                }\r\n            case 'users':\r\n                return {\r\n                    uid: entry.id,\r\n                    firstName: entry.firstName,\r\n                    lastName: entry.lastName,\r\n                    fullName: entry.firstName + '' + entry.lastName,\r\n                    region: entry.region,\r\n                    email: entry.email,\r\n                    phone: entry.phone,\r\n                    tz: entry.tz\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleSelection() {\r\n        if (this.props.isSelectable) {\r\n            this.props.selectCallback(this.props.entry, !this.props.isSelected);\r\n        }\r\n    }\r\n\r\n    toggleEditable() {\r\n        this.setState({isEditable: !this.state.isEditable});\r\n    }\r\n\r\n    render() {\r\n        var buttons = [];\r\n        switch (this.props.page) {\r\n            case 'assignedTasks':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_NOTES', entries: this.props.entry}),\r\n                        color: 'outline-primary',\r\n                        text: <span><i className=\"far fa-sticky-note fa-fw\"></i>הערות</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_DONE', entries: this.props.entry}),\r\n                        color: 'outline-primary',\r\n                        text: <span><i className=\"far fa-calendar-check fa-fw\"></i>בוצע</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_CANCEL', entries: this.props.entry }),\r\n                        color: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-calendar-times fa-fw\"></i>הסרה</span>\r\n                    },\r\n                ];\r\n                break;\r\n            case 'taskReports':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_FILL', entries: this.props.entry }),\r\n                        color: 'outline-primary',\r\n                        text: <span><i className=\"faר fa-calendar-check fa-fw\"></i>דיווח</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_UNDONE' }),\r\n                        color: 'outline-secondary',\r\n                        text: 'לא בוצע'\r\n                    },\r\n                ];\r\n                break;\r\n            case 'adminUsers':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_USER', entries: this.props.entry}),\r\n                        color: 'outline-primary',\r\n                        text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'RESET_PASSWORD', entries: this.props.entry}),\r\n                        color: 'outline-secondary',\r\n                        text: <span><i className=\"fas fa-unlock-alt fa-fw\"></i>איפוס סיסמה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_USER', entries: this.props.entry}),\r\n                        color: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-trash-alt fa-fw\"></i>מחיקה</span>\r\n                    }\r\n                ];\r\n                break;\r\n                case 'adminTasks':\r\n                        buttons = [\r\n                            {\r\n                                onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_TASK', entries: this.props.entry}),\r\n                                color: 'outline-primary',\r\n                                text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                            },\r\n                            {\r\n                                onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_STATUS', entries: this.props.entry}),\r\n                                color: 'outline-secondary',\r\n                                text: <span><i className=\"fas fa-question fa-fw\"></i>סטטוס</span>\r\n                            },\r\n                            {\r\n                                onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_TASK', entries: this.props.entry}),\r\n                                color: 'outline-secondary',\r\n                                text: <span><i className=\"far fa-trash-alt fa-fw\"></i>מחיקה</span>\r\n                            }\r\n                        ];\r\n                        break;\r\n        }\r\n\r\n        return (\r\n            <tr className={(this.props.isSelected ? 'table-primary' : '') + (this.props.isSelectable ? ' entry-selectable' : '')}>\r\n                {this.props.tableColumns.map((column) => {\r\n                    if(column != 'actions'){\r\n                        return (\r\n                            <td onClick={this.toggleSelection} key={column}>\r\n                                {this.getDataValues(this.props.entry)[column]}\r\n                            </td>\r\n                        );\r\n                    } else {\r\n                        switch (this.props.page){\r\n                            case 'assignedTasks':\r\n                                return <td key={column}>\r\n                                <span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                        פעולות\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                    {buttons.map((button) => {\r\n                                            return (\r\n                                                <Dropdown.Item key={button.text} onClick={button.onClick}>{button.text}</Dropdown.Item>\r\n                                                );\r\n                                            })}\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown></span>\r\n                            </td>;\r\n                            case 'adminUsers':\r\n                                return <td key={column}>\r\n                                <span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                        פעולות\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                    {buttons.map((button) => {\r\n                                            return (\r\n                                                <Dropdown.Item key={button.text} onClick={button.onClick}>{button.text}</Dropdown.Item>\r\n                                                );\r\n                                            })}\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown></span>\r\n                            </td>;\r\n                            case 'adminTasks':\r\n                                    return <td key={column}>\r\n                                    <span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                            פעולות\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                        {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Dropdown.Item key={button.text} onClick={button.onClick}>{button.text}</Dropdown.Item>\r\n                                                    );\r\n                                                })}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown></span>\r\n                                </td>;\r\n                            case 'taskReports':\r\n                                return <td key={column}><span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                    פעולות\r\n                                </Dropdown.Toggle>\r\n                                <Dropdown.Menu>\r\n                                {buttons.map((button) => {\r\n                                        return (\r\n                                            <Dropdown.Item key={button.text} onClick={button.onClick}>{button.text}</Dropdown.Item>\r\n                                            );\r\n                                        })}\r\n                                </Dropdown.Menu>\r\n                            </Dropdown></span></td>;\r\n                            default:\r\n                                return (\r\n                                    <td key={column}>\r\n                                        <ButtonGroup>\r\n                                            {buttons.map((button) => {\r\n                                            return (\r\n                                                <Button key={button.text} onClick={button.onClick} variant={button.color}>{button.text}</Button>\r\n                                                );\r\n                                            })}\r\n                                        </ButtonGroup>\r\n                                    </td>);\r\n                        }\r\n                    }\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(state => state)(Entry);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AANA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AA5BA;AA8BA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAvEA;AACA;AAynEA;AAuEA;AACA;AAGA;;;;AAtNA;AACA;AAwNA;AAAA;AAAA;;;;A","sourceRoot":""}