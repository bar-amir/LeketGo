{"version":3,"file":"static/webpack/static\\development\\pages\\task-reports.js.56b9fbaeb8e39adfc1db.hot-update.js","sources":["webpack:///./components/Entry.js","webpack:///./components/TableBlock.js"],"sourcesContent":["import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport {Button, ButtonToolbar, Tooltip, OverlayTrigger, Dropdown, Form, ButtonGroup} from 'react-bootstrap'\r\nimport fire from '../config/firebaseConfig'\r\n\r\nclass Entry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditable: false\r\n        }\r\n        this.toggleSelection = this.toggleSelection.bind(this);\r\n        this.toggleEditable = this.toggleEditable.bind(this);\r\n    };\r\n\r\n    getDataValues(entry) {\r\n        switch (this.props.type) {\r\n            case 'tasks':\r\n                let options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric' };\r\n                let date = entry.timestamp.toDate();\r\n                let statusIcon;\r\n                let statusMessage;\r\n                if (entry.collected) {\r\n                    if (entry.reportFilled) {\r\n                        statusIcon = 'fas fa-calendar-check';\r\n                        statusMessage = 'בוצע ומושב';\r\n                    }\r\n                    else {\r\n                        statusIcon = 'far fa-calendar-check';\r\n                        statusMessage = 'בוצע ולא מושב';\r\n                    }\r\n                } else {\r\n                    if (entry.reportFilled) {\r\n                        statusIcon = 'fas fa-calendar-times';\r\n                        statusMessage = 'לא בוצע ומושב';\r\n                    } else {\r\n                        statusIcon = 'far fa-calendar-times';\r\n                        statusMessage = 'לא בוצע ולא מושב';\r\n                    }\r\n                }\r\n                return {\r\n                    date: date.toLocaleDateString('he-IL', options),\r\n                    time: date.getHours() + ':' + ('0'+date.getMinutes()).slice(-2),\r\n                    city: entry.city,\r\n                    name: entry.name,\r\n                    street: entry.address,\r\n                    fullAddress: entry.address + ', ' + entry.city,\r\n                    actions: 'ACTIONS',\r\n                    contactName: entry['contact name'],\r\n                    contactNumber: <a style={{whiteSpace: 'nowrap'}} href={'tel: '+ entry['contact number']}>{entry['contact number']}</a>,\r\n                    checkBox: this.props.isSelected ? <Form.Check custom checked label='' type='checkbox' /> : <Form.Check custom label='' type='checkbox' />,\r\n                    statusIcon: statusIcon,\r\n                    statusMessage: statusMessage\r\n                }\r\n            case 'users':\r\n                return {\r\n                    uid: entry.id,\r\n                    firstName: entry.firstName,\r\n                    lastName: entry.lastName,\r\n                    fullName: entry.firstName + '' + entry.lastName,\r\n                    region: entry.region,\r\n                    email: entry.email,\r\n                    phone: entry.phone,\r\n                    tz: entry.tz\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleSelection() {\r\n        if (this.props.isSelectable) {\r\n            this.props.selectCallback(this.props.entry, !this.props.isSelected);\r\n        }\r\n    }\r\n\r\n    toggleEditable() {\r\n        this.setState({isEditable: !this.state.isEditable});\r\n    }\r\n\r\n    render() {\r\n        var buttons = [];\r\n        switch (this.props.page) {\r\n            case 'assignedTasks':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_NOTES', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-sticky-note fa-fw\"></i>הערות</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_DONE', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-calendar-check fa-fw\"></i>בוצע</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_CANCEL', entries: this.props.entry }),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-calendar-times fa-fw\"></i>הסרה</span>\r\n                    },\r\n                ];\r\n                break;\r\n            case 'taskReports':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_FILL', entries: this.props.entry }),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-calendar-check fa-fw\"></i>דיווח</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REPORT_UNDONE' }),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-calendar-times fa-fw\"></i>לא בוצע</span>\r\n                    },\r\n                ];\r\n                break;\r\n            case 'adminUsers':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_USER', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'RESET_PASSWORD', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"fas fa-unlock-alt fa-fw\"></i>איפוס סיסמה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_USER', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-trash-alt fa-fw\"></i>סגירת חשבון</span>\r\n                    }\r\n                ];\r\n                break;\r\n            case 'adminTasks':\r\n                buttons = [\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EDIT_TASK', entries: this.props.entry}),\r\n                        variant: 'outline-primary',\r\n                        text: <span><i className=\"far fa-edit fa-fw\"></i>עריכה</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_STATUS', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"fas fa-question fa-fw\"></i>סטטוס</span>\r\n                    },\r\n                    {\r\n                        onClick: () => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'REMOVE_TASK', entries: this.props.entry}),\r\n                        variant: 'outline-secondary',\r\n                        text: <span><i className=\"far fa-trash-alt fa-fw\"></i>מחיקה</span>\r\n                    }\r\n                ];\r\n                break;\r\n        }\r\n        if (this.props.tableTasksCardView) {\r\n            return (\r\n                <Card>\r\n\t\t\t\t\t\t\t\t\t<Card.Header>\r\n\t\t\t\t\t\t\t\t\t{date.toLocaleDateString('he-IL', options)}, {date.getHours() + ':' + ('0'+date.getMinutes()).slice(-2)}\r\n\t\t\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<Card.Title>{entry.name}</Card.Title>\r\n\t\t\t\t\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">{entry['address']}, {entry['city']}</Card.Subtitle>\r\n\t\t\t\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t<div className='mt-4'>{entry['contact name']}</div>\r\n\t\t\t\t\t\t\t\t\t\t<div><a style={{whiteSpace: 'nowrap'}} href={'tel: '+ entry['contact number']}>{entry['contact number']}</a></div>\r\n\t\t\t\t\t\t\t\t\t\t<ButtonGroup className=\"w-100 mt-4\" aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_NOTES', entries: this.props.entry})} style={{whiteSpace: 'nowrap'}} variant=\"outline-secondary\"><i className=\"far fa-sticky-note fa-fw\"></i>הערות</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_DONE', entries: this.props.entry})} style={{whiteSpace: 'nowrap'}} variant=\"outline-secondary\">בוצע</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'TASK_CANCEL', entries: this.props.entry})} style={{whiteSpace: 'nowrap'}} variant=\"outline-secondary\">הסרה</Button>\r\n\t\t\t\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</Card>\r\n            );\r\n        } else {\r\n        return (\r\n            <tr className={(this.props.isSelected ? 'table-primary' : '') + (this.props.isSelectable ? ' entry-selectable' : '')}>\r\n                {this.props.tableColumns.map((column) => {\r\n                    switch (column) {\r\n                        case 'actions':\r\n                        {\r\n                            switch (this.props.page){\r\n                                case 'assignedTasks':\r\n                                    return (\r\n                                    <td className=\"align-middle\" key={column}>\r\n                                    <span style={{whiteSpace: 'nowrap'}}><Dropdown width='200'>\r\n                                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                            פעולות\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                        {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                    {button.text}\r\n                                                    </Dropdown.Item>\r\n                                                    );\r\n                                                })}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown></span>\r\n                                    </td>\r\n                                    );\r\n                                case 'adminUsers':\r\n                                    return (\r\n                                    <td className=\"align-middle\" key={column}>\r\n                                    <span style={{whiteSpace: 'nowrap'}}>\r\n                                        <Dropdown width='200'>\r\n                                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                פעולות\r\n                                            </Dropdown.Toggle>\r\n                                            <Dropdown.Menu>\r\n                                            {buttons.map((button) => {\r\n                                            return (\r\n                                                <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                {button.text}\r\n                                                </Dropdown.Item>\r\n                                                );\r\n                                            })}\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </span>\r\n                                    </td>\r\n                                    );\r\n                                case 'adminTasks':\r\n                                        return <td className=\"align-middle\" key={column}>\r\n                                        <span style={{whiteSpace: 'nowrap'}}>\r\n                                            <Dropdown width='200'>\r\n                                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                    פעולות\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu>\r\n                                                {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                    {button.text}\r\n                                                    </Dropdown.Item>\r\n                                                    );\r\n                                                })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </span>\r\n                                    </td>;\r\n                                case 'taskReports':\r\n                                    return (\r\n                                    <td className=\"align-middle\" key={column}>\r\n                                        <span style={{whiteSpace: 'nowrap'}}>\r\n                                            <Dropdown width='200'>\r\n                                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                                    פעולות\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu>\r\n                                                    {buttons.map((button) => {\r\n                                                    return (\r\n                                                        <Dropdown.Item key={button.text} onClick={button.onClick}>\r\n                                                        {button.text}\r\n                                                        </Dropdown.Item>\r\n                                                        );\r\n                                                    })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </span>\r\n                                    </td>\r\n                                    );\r\n                                default:\r\n                                    return (\r\n                                        <td className=\"align-middle\" key={column}>\r\n                                            <ButtonGroup>\r\n                                                {buttons.map((button) => {\r\n                                                return (\r\n                                                    <Button key={button.text} onClick={button.onClick} variant={button.variant}>{button.text}</Button>\r\n                                                    );\r\n                                                })}\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                        );\r\n                            }\r\n                        }\r\n                        case 'status':\r\n                        {\r\n                        let values = this.getDataValues(this.props.entry);\r\n                        let message = values.statusMessage;\r\n                        let icon = values.statusIcon;\r\n                        return (\r\n                            <td className=\"align-middle\" key={column}>\r\n                                <ButtonToolbar>\r\n                                    <OverlayTrigger\r\n                                    placement='left'\r\n                                    overlay={\r\n                                        <Tooltip>\r\n                                        {message}\r\n                                        </Tooltip>\r\n                                    }>\r\n                                    <i className={icon}></i>\r\n                                    </OverlayTrigger>\r\n                                </ButtonToolbar>\r\n                            </td>\r\n                        );\r\n                        }\r\n                        default:\r\n                        {\r\n                        return (\r\n                            <td className=\"align-middle\" onClick={this.toggleSelection} key={column}>\r\n                                {this.getDataValues(this.props.entry)[column]}\r\n                            </td>\r\n                        );\r\n                        }\r\n                    }\r\n                })}\r\n            </tr>\r\n        );}\r\n    }\r\n}\r\nexport default connect(state => state)(Entry);","import React from 'react'\r\nimport Entry from '../components/Entry'\r\nimport { connect } from \"react-redux\"\r\nimport { Table,CardColumns, Card, Button, ButtonGroup, InputGroup, Form, Col, Row, DropdownButton, Dropdown, FormControl, Navbar } from 'react-bootstrap'\r\nimport setAssignedTasks from '../dbActions/setAssignedTasks'\r\n\r\nclass TableBlock extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttableColumns: this.getTableColumns(),\r\n\t\t\tentrySelectedCounter: 0,\r\n\t\t\tselectedEntries: {},\r\n\t\t\tcolumnNames: {\r\n\t\t\t\t'actions': 'פעולות',\r\n\t\t\t\t'date': 'תאריך',\r\n\t\t\t\t'time': 'שעה',\r\n\t\t\t\t'city': 'עיר',\r\n\t\t\t\t'fullAddress': 'כתובת',\r\n\t\t\t\t'name': 'ספק',\r\n\t\t\t\t'uid': 'uid',\r\n\t\t\t\t'firstName': 'שם פרטי',\r\n\t\t\t\t'lastName': 'שם משפחה',\r\n\t\t\t\t'fullName': 'שם מלא',\r\n\t\t\t\t'region': 'אזור',\r\n\t\t\t\t'email': 'דוא\"ל',\r\n\t\t\t\t'tz': 'תעודת זהות',\r\n\t\t\t\t'street': 'רחוב ומספר',\r\n\t\t\t\t'contactName': 'שם',\r\n\t\t\t\t'contactNumber': 'טלפון',\r\n\t\t\t\t'checkBox': '',\r\n\t\t\t\t'status': '',\r\n\t\t\t\t'phone': 'טלפון'\r\n\t\t\t},\r\n\t\t\tsearchValue: '',\r\n\t\t\tsearchField: this.props.page == 'adminUsers' ? 'firstName' : 'name',\r\n\t\t};\r\n\t\tthis.selectCallback = this.selectCallback.bind(this);\r\n\t\tthis.cancelSelection = this.cancelSelection.bind(this);\r\n\t\tthis.assignTasks = this.assignTasks.bind(this);\r\n\t}\r\n\r\n\tgetTableColumns() {\r\n\t\tswitch (this.props.page) {\r\n\t\t\tcase 'index':\r\n\t\t\t\treturn ['checkBox', 'date', 'time', 'city', 'name'];\r\n\t\t\tcase 'assignedTasks':\r\n\t\t\t\treturn ['date', 'time', 'fullAddress', 'name', 'contactName', 'contactNumber', 'actions'];\r\n\t\t\tcase 'taskReports':\r\n\t\t\t\treturn ['date', 'street', 'city', 'name', 'actions'];\r\n\t\t\tcase 'adminUsers':\r\n\t\t\t\treturn ['tz', 'firstName', 'lastName', 'email', 'phone', 'region', 'actions'];\r\n\t\t\tcase 'adminTasks':\r\n\t\t\t\t\treturn ['status', 'date', 'time', 'street', 'city', 'name', 'actions'];\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tselectCallback(entry, isSelected) {\r\n\t\tlet newSelectedEntries = {...this.state.selectedEntries};\r\n\t\tif(isSelected){\r\n\t\t\tnewSelectedEntries[entry.id] = {...entry};\r\n\t\t\tthis.setState({\r\n\t\t\t\tentrySelectedCounter: this.state.entrySelectedCounter + 1,\r\n\t\t\t\tselectedEntries: newSelectedEntries\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdelete newSelectedEntries[entry.id];\r\n\t\t\tthis.setState({\r\n\t\t\t\tentrySelectedCounter: this.state.entrySelectedCounter - 1,\r\n\t\t\t\tselectedEntries: newSelectedEntries\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcancelSelection() {\r\n\t\tthis.setState({\r\n\t\t\tentrySelectedCounter: 0,\r\n\t\t\tselectedEntries: {}\r\n\t\t});\r\n\t}\r\n\r\n\tassignTasks() {\r\n        var taskIDs = [];\r\n        for (var taskID in this.state.selectedEntries) {\r\n            taskIDs.push(taskID)         \r\n        }\r\n        setAssignedTasks(this.props, taskIDs, this.state.entrySelectedCounter, this.state.selectedEntries)\r\n\t}\r\n\r\n\thandleChangeForm(event) {\r\n\t\t\r\n\t\tlet fleldVal = event.target.value;\r\n\t\tthis.setState({searchValue: fleldVal});\r\n\t}\r\n\r\n\thandleChangeDropDown(event) {\r\n\t\tlet fleldVal = event.target.value;\r\n\t\tswitch (fleldVal) {\r\n\t\t\tcase 'שם פרטי':\r\n\t\t\t\tthis.setState({searchField: 'firstName'});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'שם משפחה':\r\n\t\t\t\t\tthis.setState({searchField: 'lastName'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'תעודת זהות':\r\n\t\t\t\tthis.setState({searchField: 'tz'});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'רחוב ומספר':\r\n\t\t\t\tthis.setState({searchField: 'address'});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'עיר מגורים':\r\n\t\t\t\t\tthis.setState({searchField: 'city'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'מספר טלפון':\r\n\t\t\t\tthis.setState({searchField: 'phone'});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'דואר אלקטרוני':\r\n\t\t\t\tthis.setState({searchField: 'email'});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ספק':\r\n\t\t\t\t\tthis.setState({searchField: 'name'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'עיר':\r\n\t\t\t\t\tthis.setState({searchField: 'city'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'רחוב ומספר':\r\n\t\t\t\t\tthis.setState({searchField: 'address'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'איש קשר':\r\n\t\t\t\t\tthis.setState({searchField: 'contact name'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'טלפון':\r\n\t\t\t\t\tthis.setState({searchField: 'contact number'});\r\n\t\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.props.data.length == 0){\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\tjustifyContent: 'center'\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<div className=\"nothing\" style= {{\r\n\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\tflexDirection: 'column',\r\n\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\tjustifyContent: 'center'\r\n\t\t\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<img src=\"/static/nothing.png\" width=\"100\"/>\r\n\t\t\t\t\t\t<div style={{\r\n\t\t\t\t\t\t\tfontSize: '20px',\r\n\t\t\t\t\t\t\tmarginTop: '10px'\r\n\t\t\t\t\t\t}}>המממ... אין כאן כלום</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\tlet actionsBar = '';\r\n\t\tif (this.props.isSelectable && this.state.entrySelectedCounter > 0) {\r\n\t\t\tactionsBar = \r\n\t\t\t\t<Navbar bg='light' fixed='bottom'>\r\n\t\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t\t<Button onClick={this.assignTasks} variant='primary'>שיבוץ {this.state.entrySelectedCounter} איסופים</Button>\r\n\t\t\t\t\t\t<Button onClick={this.cancelSelection} variant='secondary'>ביטול</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Navbar>;\r\n\t\t}\r\n\t\tif (this.props.isSearchable && this.props.page=='adminUsers') {\r\n\t\t\tactionsBar = \r\n\t\t\t\t<Navbar bg='light' fixed='bottom'>\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t<button style={{whiteSpace: 'nowrap'}} type=\"button\" className=\"btn btn-primary\" onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'ADD_USER', entries: this.props.entry})}>הוספת מתנדב</button>\r\n\t\t\t\t\t\t\t<button style={{whiteSpace: 'nowrap'}} type=\"button\" className=\"btn btn-secondary\" onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'ADD_USER_CSV', entries: this.props.entry})}>הוספה מקובץ</button></div>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<InputGroup className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\tvariant='outline-secondary'\r\n\t\t\t\t\t\t\t\ttitle='Dropdown'\r\n\t\t\t\t\t\t\t\tdrop='up' onChange={this.handleChangeDropDown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t<option>שם פרטי</option>\r\n\t\t\t\t\t\t\t\t\t<option>שם משפחה</option>\r\n\t\t\t\t\t\t\t\t\t<option>תעודת זהות</option>\r\n\t\t\t\t\t\t\t\t\t<option>רחוב ומספר</option>\r\n\t\t\t\t\t\t\t\t\t<option>עיר מגורים</option>\r\n\t\t\t\t\t\t\t\t\t<option>מספר טלפון</option>\r\n\t\t\t\t\t\t\t\t\t<option>דואר אלקטרוני</option>\r\n\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t<FormControl onChange={this.handleChangeForm.bind(this)} aria-describedby=\"basic-addon1\" />\r\n\t\t\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Navbar>;\r\n\t\t}\r\n\t\tif (this.props.isSearchable && this.props.page=='adminTasks') {\r\n\t\t\tactionsBar = \r\n\t\t\t\t<Navbar bg='light' fixed='bottom'>\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t<button style={{whiteSpace: 'nowrap'}} type=\"button\" className=\"btn btn-primary\" onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'ADD_TASK', entries: this.props.entry})}>הוספת איסוף</button>\r\n\t\t\t\t\t\t\t<button style={{whiteSpace: 'nowrap'}} type=\"button\" className=\"btn btn-secondary\" onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'ADD_TASK_CSV', entries: this.props.entry})}>הוספה מקובץ</button>\r\n\t\t\t\t\t\t\t<button style={{whiteSpace: 'nowrap'}} type=\"button\" className=\"btn btn-secondary\" onClick={() => this.props.dispatch({ type: 'OPEN_MODAL', msg: 'EXPORT_TASK_CSV', entries: this.props.entry})}>ייצוא דוח</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<InputGroup className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\tvariant='outline-secondary'\r\n\t\t\t\t\t\t\t\ttitle='Dropdown'\r\n\t\t\t\t\t\t\t\tdrop='up'\r\n\t\t\t\t\t\t\t\tonChange={this.handleChangeDropDown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t<option>ספק</option>\r\n\t\t\t\t\t\t\t\t\t<option>עיר</option>\r\n\t\t\t\t\t\t\t\t\t<option>רחוב ומספר</option>\r\n\t\t\t\t\t\t\t\t\t<option>איש קשר</option>\r\n\t\t\t\t\t\t\t\t\t<option>טלפון</option>\r\n\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t<FormControl onChange={this.handleChangeForm.bind(this)} aria-describedby=\"basic-addon1\" />\r\n\t\t\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Navbar>;\r\n\t\t}\r\n\t\tif (this.props.tableTasksCardView){\r\n\t\t\treturn (\r\n\t\t\t\t<CardColumns>\r\n\t\t\t\t\t{this.props.data.map((entry) => {\r\n\t\t\t\t\t\tlet options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric' };\r\n\t\t\t\t\t\tlet date = entry.timestamp.toDate();\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Entry tableTasksCardView={this.props.tableTasksCardView} page={this.props.page} isSelected={isSelected} isSelectable={this.props.isSelectable} type={this.props.type} key={entry.id} selectCallback={this.selectCallback} entry={entry} tableColumns={this.state.tableColumns}/>\r\n\t\t\t\t\t\t);})}\r\n\t\t\t\t</CardColumns>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\treturn (\r\n\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t<Table hover responsive>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t{this.state.tableColumns.map((column) => {\r\n\t\t\t\t\t\t\tswitch (column){\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" key={column}>{this.state.columnNames[column]}</th>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.props.data.map((entry) => {\r\n\t\t\t\t\t\t\tlet isSelected = false;\r\n\t\t\t\t\t\t\tif (this.state.selectedEntries[entry.id]){\r\n\t\t\t\t\t\t\t\tisSelected = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet ret = <Entry page={this.props.page} isSelected={isSelected} isSelectable={this.props.isSelectable} type={this.props.type} key={entry.id} selectCallback={this.selectCallback} entry={entry} tableColumns={this.state.tableColumns}/>\r\n\t\t\t\t\t\t\tif (this.props.isSearchable){\r\n\t\t\t\t\t\t\t\tfor (let key in entry){\r\n\t\t\t\t\t\t\t\t\tif (key == this.state.searchField)\r\n\t\t\t\t\t\t\t\t\t\tif(entry[key].includes(this.state.searchValue))\r\n\t\t\t\t\t\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t\t{actionsBar}\r\n\t\t\t</div>\r\n\t\t);}\r\n\t\t\t\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(state => state)(TableBlock);"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;AC1TA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AA1BA;AA4BA;AACA;AACA;AAhCA;AAiCA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAZA;AAcA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAtCA;AAwiSA;AAAA;AAAA;;;;A","sourceRoot":""}