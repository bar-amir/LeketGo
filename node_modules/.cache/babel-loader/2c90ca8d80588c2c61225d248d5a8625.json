{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Card, Button, ButtonToolbar, Tooltip, OverlayTrigger, Dropdown, Form, ButtonGroup } from 'react-bootstrap';\nimport fire from '../config/firebaseConfig';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Link from 'next/link';\n\nvar Entry =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Entry, _React$Component);\n\n  function Entry(props) {\n    var _this;\n\n    _classCallCheck(this, Entry);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Entry).call(this, props));\n    _this.state = {\n      isEditable: false\n    };\n    _this.toggleSelection = _this.toggleSelection.bind(_assertThisInitialized(_this));\n    _this.toggleEditable = _this.toggleEditable.bind(_assertThisInitialized(_this));\n    _this.copyToClipboard = _this.copyToClipboard.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Entry, [{\n    key: \"copyToClipboard\",\n    value: function copyToClipboard(values) {\n      var fullAddress = values.street + ', ' + values.city;\n      document.execCommand(\"copy\");\n    }\n  }, {\n    key: \"getDataValues\",\n    value: function getDataValues(entry) {\n      switch (this.props.type) {\n        case 'tasks':\n          var options = {\n            weekday: 'short',\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric'\n          };\n          var date = entry.timestamp.toDate();\n          var statusIcon;\n          var statusMessage;\n          var fullAddressWithButtons = React.createElement(\"span\", null, entry.address + ', ' + entry.city, React.createElement(OverlayTrigger, {\n            placement: \"top\",\n            overlay: React.createElement(Tooltip, null, \"\\u05D4\\u05E2\\u05EA\\u05E7\\u05EA \\u05DB\\u05EA\\u05D5\\u05D1\\u05EA\")\n          }, React.createElement(CopyToClipboard, {\n            text: entry.address + ', ' + entry.city\n          }, React.createElement(\"a\", {\n            href: '#' + entry.id\n          }, React.createElement(\"i\", {\n            style: {\n              cursor: 'pointer'\n            },\n            className: \"ml-2 far fa-clipboard nm\"\n          })))), React.createElement(OverlayTrigger, {\n            placement: \"top\",\n            overlay: React.createElement(Tooltip, null, \"\\u05D7\\u05D9\\u05E4\\u05D5\\u05E9 \\u05D1\\u05BEWaze\")\n          }, React.createElement(\"a\", {\n            target: \"_blank\",\n            href: \"https://waze.com/ul?q=\" + entry.address + ', ' + entry.city\n          }, React.createElement(\"i\", {\n            style: {\n              cursor: 'pointer'\n            },\n            className: \"ml-2 fab fa-waze nm\"\n          }))));\n\n          if (entry.collected) {\n            if (entry.reportFilled) {\n              statusIcon = 'fas fa-calendar-check';\n              statusMessage = 'בוצע ומושב';\n            } else {\n              statusIcon = 'far fa-calendar-check';\n              statusMessage = 'בוצע ולא מושב';\n            }\n          } else {\n            if (entry.reportFilled) {\n              statusIcon = 'fas fa-calendar-times';\n              statusMessage = 'לא בוצע ומושב';\n            } else {\n              statusIcon = 'far fa-calendar-times';\n              statusMessage = 'לא בוצע ולא מושב';\n            }\n          }\n\n          return {\n            tid: entry.id,\n            date: date.toLocaleDateString('he-IL', options),\n            time: date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2),\n            city: entry.city,\n            name: entry.name,\n            street: entry.address,\n            fullAddress: entry.address + ', ' + entry.city,\n            fullAddressWithButtons: fullAddressWithButtons,\n            actions: 'ACTIONS',\n            contactName: entry['contact name'],\n            contactNumber: React.createElement(\"a\", {\n              style: {\n                whiteSpace: 'nowrap'\n              },\n              href: 'tel: ' + entry['contact number']\n            }, entry['contact number']),\n            checkBox: this.props.isSelected ? React.createElement(Form.Check, {\n              custom: true,\n              checked: true,\n              label: \"\",\n              type: \"checkbox\"\n            }) : React.createElement(Form.Check, {\n              custom: true,\n              label: \"\",\n              type: \"checkbox\"\n            }),\n            statusIcon: statusIcon,\n            statusMessage: statusMessage\n          };\n\n        case 'users':\n          return {\n            uid: entry.id,\n            firstName: entry.firstName,\n            lastName: entry.lastName,\n            fullName: entry.firstName + '' + entry.lastName,\n            region: entry.region,\n            email: entry.email,\n            phone: entry.phone,\n            tz: entry.tz\n          };\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection() {\n      if (this.props.isSelectable) {\n        this.props.selectCallback(this.props.entry, !this.props.isSelected);\n      }\n    }\n  }, {\n    key: \"toggleEditable\",\n    value: function toggleEditable() {\n      this.setState({\n        isEditable: !this.state.isEditable\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var buttons = [];\n      var nm = this.props.tableTasksCardView ? 'nm' : '';\n\n      switch (this.props.page) {\n        case 'assignedTasks':\n          buttons = [{\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'TASK_NOTES',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-primary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-sticky-note fa-fw \" + nm\n            }), this.props.tableTasksCardView ? React.createElement(\"br\", null) : '', \"\\u05D4\\u05E2\\u05E8\\u05D5\\u05EA\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'TASK_DONE',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-primary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-calendar-check fa-fw \" + nm\n            }), this.props.tableTasksCardView ? React.createElement(\"br\", null) : '', \"\\u05D1\\u05D5\\u05E6\\u05E2\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'TASK_CANCEL',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-calendar-times fa-fw \" + nm\n            }), this.props.tableTasksCardView ? React.createElement(\"br\", null) : '', \"\\u05D4\\u05E1\\u05E8\\u05D4\")\n          }];\n          break;\n\n        case 'taskReports':\n          buttons = [{\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'REPORT_FILL',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-primary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-calendar-check fa-fw \" + nm\n            }), this.props.tableTasksCardView ? React.createElement(\"br\", null) : '', \"\\u05D3\\u05D9\\u05D5\\u05D5\\u05D7\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'REPORT_UNDONE'\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-calendar-times fa-fw \" + nm\n            }), this.props.tableTasksCardView ? React.createElement(\"br\", null) : '', \"\\u05DC\\u05D0 \\u05D1\\u05D5\\u05E6\\u05E2\")\n          }];\n          break;\n\n        case 'adminUsers':\n          buttons = [{\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'EDIT_USER',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-primary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-edit fa-fw\"\n            }), \"\\u05E2\\u05E8\\u05D9\\u05DB\\u05D4\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'RESET_PASSWORD',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"fas fa-unlock-alt fa-fw\"\n            }), \"\\u05D0\\u05D9\\u05E4\\u05D5\\u05E1 \\u05E1\\u05D9\\u05E1\\u05DE\\u05D4\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'REMOVE_USER',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-trash-alt fa-fw\"\n            }), \"\\u05E1\\u05D2\\u05D9\\u05E8\\u05EA \\u05D7\\u05E9\\u05D1\\u05D5\\u05DF\")\n          }];\n          break;\n\n        case 'adminTasks':\n          buttons = [{\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'EDIT_TASK',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-primary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-edit fa-fw\"\n            }), \"\\u05E2\\u05E8\\u05D9\\u05DB\\u05D4\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'TASK_STATUS',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"fas fa-question fa-fw\"\n            }), \"\\u05E1\\u05D8\\u05D8\\u05D5\\u05E1\")\n          }, {\n            onClick: function onClick() {\n              return _this2.props.dispatch({\n                type: 'OPEN_MODAL',\n                msg: 'REMOVE_TASK',\n                entries: _this2.props.entry\n              });\n            },\n            variant: 'outline-secondary',\n            text: React.createElement(\"span\", null, React.createElement(\"i\", {\n              className: \"far fa-trash-alt fa-fw\"\n            }), \"\\u05DE\\u05D7\\u05D9\\u05E7\\u05D4\")\n          }];\n          break;\n      }\n\n      if (this.props.tableTasksCardView) {\n        var values = this.getDataValues(this.props.entry);\n        var numButtons = 100 / buttons.length;\n        var viewButtons = React.createElement(ButtonGroup, {\n          className: \"w-100 mt-4\"\n        }, buttons.map(function (button) {\n          return React.createElement(Button, {\n            className: \"w-\" + numButtons,\n            key: button.text,\n            onClick: button.onClick,\n            variant: \"outline-secondary\"\n          }, button.text);\n        }));\n        return React.createElement(Card, {\n          id: values.tid\n        }, React.createElement(Card.Header, null, values.date, \", \", values.time), React.createElement(Card.Body, null, React.createElement(Card.Title, null, values.name), React.createElement(Card.Subtitle, {\n          className: \"mb-2 text-muted\"\n        }, values.fullAddressWithButtons), React.createElement(Card.Text, null, React.createElement(\"div\", {\n          className: \"mt-4\"\n        }, values.contactName), React.createElement(\"div\", null, values.contactNumber), viewButtons)));\n      } else {\n        return React.createElement(\"tr\", {\n          className: (this.props.isSelected ? 'table-primary' : '') + (this.props.isSelectable ? ' entry-selectable' : '')\n        }, this.props.tableColumns.map(function (column) {\n          switch (column) {\n            case 'actions':\n              {\n                switch (_this2.props.page) {\n                  case 'assignedTasks':\n                    return React.createElement(\"td\", {\n                      className: \"align-middle\",\n                      key: column\n                    }, React.createElement(\"span\", {\n                      style: {\n                        whiteSpace: 'nowrap'\n                      }\n                    }, React.createElement(Dropdown, {\n                      width: \"200\"\n                    }, React.createElement(Dropdown.Toggle, {\n                      variant: \"secondary\",\n                      id: \"dropdown-basic\"\n                    }, \"\\u05E4\\u05E2\\u05D5\\u05DC\\u05D5\\u05EA\"), React.createElement(Dropdown.Menu, null, buttons.map(function (button) {\n                      return React.createElement(Dropdown.Item, {\n                        key: button.text,\n                        onClick: button.onClick\n                      }, button.text);\n                    })))));\n\n                  case 'adminUsers':\n                    return React.createElement(\"td\", {\n                      className: \"align-middle\",\n                      key: column\n                    }, React.createElement(\"span\", {\n                      style: {\n                        whiteSpace: 'nowrap'\n                      }\n                    }, React.createElement(Dropdown, {\n                      width: \"200\"\n                    }, React.createElement(Dropdown.Toggle, {\n                      variant: \"secondary\",\n                      id: \"dropdown-basic\"\n                    }, \"\\u05E4\\u05E2\\u05D5\\u05DC\\u05D5\\u05EA\"), React.createElement(Dropdown.Menu, null, buttons.map(function (button) {\n                      return React.createElement(Dropdown.Item, {\n                        key: button.text,\n                        onClick: button.onClick\n                      }, button.text);\n                    })))));\n\n                  case 'adminTasks':\n                    return React.createElement(\"td\", {\n                      className: \"align-middle\",\n                      key: column\n                    }, React.createElement(\"span\", {\n                      style: {\n                        whiteSpace: 'nowrap'\n                      }\n                    }, React.createElement(Dropdown, {\n                      width: \"200\"\n                    }, React.createElement(Dropdown.Toggle, {\n                      variant: \"secondary\",\n                      id: \"dropdown-basic\"\n                    }, \"\\u05E4\\u05E2\\u05D5\\u05DC\\u05D5\\u05EA\"), React.createElement(Dropdown.Menu, null, buttons.map(function (button) {\n                      return React.createElement(Dropdown.Item, {\n                        key: button.text,\n                        onClick: button.onClick\n                      }, button.text);\n                    })))));\n\n                  case 'taskReports':\n                    return React.createElement(\"td\", {\n                      className: \"align-middle\",\n                      key: column\n                    }, React.createElement(\"span\", {\n                      style: {\n                        whiteSpace: 'nowrap'\n                      }\n                    }, React.createElement(Dropdown, {\n                      width: \"200\"\n                    }, React.createElement(Dropdown.Toggle, {\n                      variant: \"secondary\",\n                      id: \"dropdown-basic\"\n                    }, \"\\u05E4\\u05E2\\u05D5\\u05DC\\u05D5\\u05EA\"), React.createElement(Dropdown.Menu, null, buttons.map(function (button) {\n                      return React.createElement(Dropdown.Item, {\n                        key: button.text,\n                        onClick: button.onClick\n                      }, button.text);\n                    })))));\n\n                  default:\n                    return React.createElement(\"td\", {\n                      className: \"align-middle\",\n                      key: column\n                    }, React.createElement(ButtonGroup, null, buttons.map(function (button) {\n                      return React.createElement(Button, {\n                        key: button.text,\n                        onClick: button.onClick,\n                        variant: button.variant\n                      }, button.text);\n                    })));\n                }\n              }\n\n            case 'status':\n              {\n                var _values = _this2.getDataValues(_this2.props.entry);\n\n                var message = _values.statusMessage;\n                var icon = _values.statusIcon;\n                return React.createElement(\"td\", {\n                  className: \"align-middle\",\n                  key: column\n                }, React.createElement(ButtonToolbar, null, React.createElement(OverlayTrigger, {\n                  placement: \"left\",\n                  overlay: React.createElement(Tooltip, null, message)\n                }, React.createElement(\"i\", {\n                  className: icon\n                }))));\n              }\n\n            default:\n              {\n                return React.createElement(\"td\", {\n                  className: \"align-middle\",\n                  onClick: _this2.toggleSelection,\n                  key: column\n                }, _this2.getDataValues(_this2.props.entry)[column]);\n              }\n          }\n        }));\n      }\n    }\n  }]);\n\n  return Entry;\n}(React.Component);\n\nexport default connect(function (state) {\n  return state;\n})(Entry);","map":null,"metadata":{},"sourceType":"module"}