{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport fire from '../config/firebaseConfig';\nimport refresh4User from './refresh4User';\n\nfunction sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries) {\n  console.log(\"test2\", numOfSuccesses, numOfFailures, entrySelectedCounter);\n\n  if (numOfFailures == 0 && numOfSuccesses == entrySelectedCounter) {\n    props.dispatch({\n      type: 'OPEN_MODAL',\n      msg: 'ASSIGN_TASKS_SUCCESS',\n      entries: selectedEntries\n    });\n  }\n\n  if (numOfSuccesses == 0 && numOfFailures == entrySelectedCounter) {\n    props.dispatch({\n      type: 'OPEN_MODAL',\n      msg: 'ASSIGN_TASKS_FAILED',\n      entries: selectedEntries\n    });\n  }\n\n  if (numOfFailures > 0 && numOfSuccesses > 0) {\n    props.dispatch({\n      type: 'OPEN_MODAL',\n      msg: 'ASSIGN_TASKS_MIX',\n      entries: selectedEntries\n    });\n  }\n\n  refresh4User(props.dispatch, props.userData.region, props.userData.uid);\n}\n\nfunction runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db) {\n  db.runTransaction(function (transaction) {\n    var taskID = taskIDs[index];\n    var task = db.collection(\"tasks\").doc(taskID);\n    return transaction.get(task).then(function (taskSnapshot) {\n      if (!taskSnapshot.exists) {\n        throw \"Could not find task with given ID: \" + taskID;\n      }\n\n      var taskIsAvialable = taskSnapshot.data().volunteerUid == null ? true : false;\n\n      if (taskIsAvialable) {\n        transaction.update(task, {\n          volunteerUid: props.userData.uid\n        });\n        return \"Task was assigned to user successfully!\";\n      } else {\n        return _Promise.reject(\"Sorry! task was taken earlier.\");\n      }\n    });\n  }).then(function (msg) {\n    index++;\n    console.log(msg);\n    numOfSuccesses++;\n    console.log(\"test\", numOfSuccesses, numOfFailures, entrySelectedCounter);\n\n    if (index < entrySelectedCounter) {\n      runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db);\n    }\n\n    if (numOfFailures + numOfSuccesses == entrySelectedCounter) {\n      sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries);\n    }\n  }).catch(function (msg) {\n    index++;\n    console.log(msg);\n    numOfFailures++;\n    console.log(\"test\", numOfSuccesses, numOfFailures, entrySelectedCounter);\n\n    if (index < entrySelectedCounter) {\n      runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db);\n    }\n\n    if (numOfFailures + numOfSuccesses == entrySelectedCounter) {\n      sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries);\n    }\n  });\n}\n\nexport default function setAssignedTasks(props, taskIDs, entrySelectedCounter, selectedEntries) {\n  var db = fire.firestore();\n  var numOfSuccesses = 0;\n  var numOfFailures = 0;\n  var index = 0;\n  runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db);\n}","map":{"version":3,"sources":["C:\\Users\\Oz\\Desktop\\leket\\leket\\dbActions\\setAssignedTasks.js"],"names":["fire","refresh4User","sendCompletionMsg","props","numOfFailures","numOfSuccesses","entrySelectedCounter","selectedEntries","console","log","dispatch","type","msg","entries","userData","region","uid","runTrans","taskIDs","index","db","runTransaction","transaction","taskID","task","collection","doc","get","then","taskSnapshot","exists","taskIsAvialable","data","volunteerUid","update","reject","catch","setAssignedTasks","firestore"],"mappings":"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","sourcesContent":["import fire from '../config/firebaseConfig'\r\nimport refresh4User from './refresh4User'\r\n\r\nfunction sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries){\r\n    console.log(\"test2\", numOfSuccesses, numOfFailures, entrySelectedCounter)\r\n    if (numOfFailures == 0 && numOfSuccesses == entrySelectedCounter) {\r\n        props.dispatch({ type: 'OPEN_MODAL', msg: 'ASSIGN_TASKS_SUCCESS', entries: selectedEntries });\r\n    }\r\n    if (numOfSuccesses == 0 && numOfFailures == entrySelectedCounter) {\r\n        props.dispatch({ type: 'OPEN_MODAL', msg: 'ASSIGN_TASKS_FAILED', entries: selectedEntries });\r\n    }\r\n    if (numOfFailures > 0 && numOfSuccesses > 0) {\r\n        props.dispatch({ type: 'OPEN_MODAL', msg: 'ASSIGN_TASKS_MIX', entries: selectedEntries });\r\n    }\r\n    refresh4User(props.dispatch, props.userData.region, props.userData.uid);\r\n}\r\n\r\n\r\nfunction runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db) {\r\n    db.runTransaction((transaction) => {\r\n        var taskID = taskIDs[index]\r\n        var task = db.collection(\"tasks\").doc(taskID);\r\n        return transaction.get(task).then((taskSnapshot) => {\r\n            if (!taskSnapshot.exists) {\r\n                throw \"Could not find task with given ID: \" + taskID;\r\n            }\r\n            var taskIsAvialable = (taskSnapshot.data().volunteerUid == null) ? true : false;\r\n            if (taskIsAvialable) {\r\n                transaction.update(task, { volunteerUid: props.userData.uid });\r\n                return \"Task was assigned to user successfully!\";\r\n            } else {\r\n                return Promise.reject(\"Sorry! task was taken earlier.\");\r\n            }\r\n        });\r\n    }).then((msg) => {\r\n        index++;\r\n        console.log(msg);\r\n        numOfSuccesses++;\r\n        console.log(\"test\", numOfSuccesses, numOfFailures, entrySelectedCounter)\r\n        if (index < entrySelectedCounter) {\r\n            runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db)\r\n        }\r\n        if (numOfFailures + numOfSuccesses == entrySelectedCounter) {\r\n            sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries);\r\n        }\r\n    }).catch((msg) => {\r\n        index++;\r\n        console.log(msg);\r\n        numOfFailures++;\r\n        console.log(\"test\", numOfSuccesses, numOfFailures, entrySelectedCounter)\r\n        if (index < entrySelectedCounter) {\r\n            runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db)\r\n        }\r\n        if (numOfFailures + numOfSuccesses == entrySelectedCounter) {\r\n            sendCompletionMsg(props, numOfFailures, numOfSuccesses, entrySelectedCounter, selectedEntries);\r\n        }\r\n    });\r\n}\r\n\r\nexport default function setAssignedTasks(props, taskIDs, entrySelectedCounter, selectedEntries) {\r\n    const db = fire.firestore();\r\n    var numOfSuccesses = 0;\r\n    var numOfFailures = 0;\r\n    var index = 0;\r\n    runTrans(props, taskIDs, entrySelectedCounter, selectedEntries, index, numOfSuccesses, numOfFailures, db)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}